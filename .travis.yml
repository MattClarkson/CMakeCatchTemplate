#/*============================================================================
#
#  MYPROJECT: A software package for whatever.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

# Inspired by: https://github.com/skvark/opencv-python
#        and : https://github.com/matthew-brett/multibuild
#        and : https://github.com/thompson318/ndicapi-wheels

# This project aims to provide C++ developers with a useful template
# for developing their own project. Additionally, if the C++ developer
# wants to build python wheels using for example Boost.Python or PyBind11,
# then this project, and specifically this travis script enables that.
# But the python parts should be optional, as some C++ developers will
# not want them, but will want to take advantage of cross platform testing.
# Set DO_PYTHON_BUILD to "false" if you don't want python wheels.

language: python
# The Travis Python version is unrelated to the version we build and test
# python wheels with.  This version of python for python wheels
# is set with the MB_PYTHON_VERSION variable further below.
python: 3.6
sudo: required
dist: trusty
services: docker

env:
  global:
    - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
    - REPO_DIR=.
    - BUILD_COMMIT=44-multi-platform-testing
    - BUILD_DEPENDS="numpy six wheel"
    - TEST_DEPENDS="numpy six"
    - BDIST_PARAMS=""
    - PLAT=x86_64
    - UNICODE_WIDTH=32
    - DO_PYTHON_BUILD="true"

matrix:
  fast_finish: true
  exclude:
    - python: 3.6
  include:
    # Builds for MacOS
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=2.7
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.6
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.7
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    # Builds for Linux
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install: |
      if [ "${DO_PYTHON_BUILD}" = "true" ]; then

        # On Linux, this builds the C++ and then wheel
        # inside the manylinux docker container (Centos 5).
        # On Mac, it builds it inside the Travis Mac VM.

        build_wheel $REPO_DIR $PLAT

      else

        # On Linux and Mac, this builds the C++
        # inside the Travis VM. On Linux then this will
        # be the OS listed above, e.g. Ubuntu trusty.

        source ci_cmake_build.sh
        cmake_build

      fi

script: |
    if [ "${DO_PYTHON_BUILD}" = "true" ]; then
      install_run $PLAT
    fi

after_success: |
    # Upload wheels to pypi if requested
    if [ -n "$TRAVIS_TAG" ]; then
      if [ "${DO_PYTHON_BUILD}" = "true" ]; then
        pip install twine
        if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then
          pip install --upgrade pyOpenSSL
        fi
        twine upload --repository pypi -u NOT_SET -p NOT_SET --skip-existing wheelhouse/*
      else
        echo "DO_PYTHON_BUILD not set, deployment skipped."
      fi
    else
      echo "Tag not set, deployment skipped."
    fi
