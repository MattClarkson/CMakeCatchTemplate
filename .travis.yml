#/*============================================================================
#
#  MYPROJECT: A software package for whatever.
#
#  Copyright (c) University College London (UCL). All rights reserved.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.
#
#  See LICENSE.txt in the top level directory for details.
#
#============================================================================*/

# Inspired by: https://github.com/skvark/opencv-python
#        and : https://github.com/matthew-brett/multibuild
# Firstly, we want to compile and test the C++ library of this project on
# Linux and Mac. If you are only doing a C++ library, you can set DO_PYTHON_BUILD
# to false. However, we hope tht lots of people will be inspired to provide
# python wrappers for their C++ libraries, and if they do, building python
# wheels is quite difficult. So, it would be good for this CMakeCatchTemplate
# project to provide the mechanism to enable a C++ Python module to be easily
# deployed. So, that is why we are doing all the Travis/Appveyor
# on an environment that is suitable for BOTH C++ and Python.
# So, we make use of Matthew Brett's multibuild.

env:
  global:
    # Prompt
    - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
    - REPO_DIR=.
    - BUILD_COMMIT=HEAD
    - BUILD_DEPENDS="numpy six"
    - TEST_DEPENDS="numpy six"
    - BDIST_PARAMS=""
    - PLAT=x86_64
    - UNICODE_WIDTH=32
    - DO_PYTHON_BUILD="true"

language: python
# The Travis Python version is unrelated to the version we build and test
# with.  This is set with the MB_PYTHON_VERSION variable.
python: 3.5
sudo: required
dist: trusty
services: docker

matrix:
  fast_finish: true
  exclude:
    - python: 3.5
  include:
    # Builds for MacOS
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=2.7
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.4
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.5
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.6
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    - os: osx
      language: generic
      osx_image: xcode8
      env:
        - MB_PYTHON_VERSION=3.7
        - BDIST_PARAMS="-- -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.7"
    # Builds for Linux
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=2.7
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.3
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.3
        - PLAT=i686
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.4
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.4
        - PLAT=i686
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      compiler: gcc
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success: |
  # Upload wheels to pypi if requested
  if [ -n "$TRAVIS_TAG" ]; then
    if [ "${DO_PYTHON_BUILD}" = "true"]; then
      set -x
      pip install twine
      if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then
        pip install --upgrade pyOpenSSL
      fi
      twine upload --repository pypi -u NOT_SET -p NOT_SET --skip-existing dist/*
      set +x
    fi
  else
    echo "Tag not set, deployment skipped."
  fi